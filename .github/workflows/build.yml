name: Build, flash and test meteopod firmware

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: [self-hosted, Linux, X64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean and set up environment
      shell: bash
      run: |
        source /opt/esp-idf/export.sh
        idf.py fullclean
        cp /opt/sdkconfig.defaults .

    - name: Build with ESP-IDF
      shell: bash
      run: |
        source /opt/esp-idf/export.sh
        idf.py build

    - name: Build unit test app
      shell: bash
      run: |
        source /opt/esp-idf/export.sh
        idf.py -C unity-app -DTESTS_ALL=1 fullclean
        cp /opt/sdkconfig.defaults.unity ./unity-app
        idf.py -C unity-app -DTESTS_ALL=1 build

  test:
    needs: build
    runs-on: [self-hosted, Linux, X64]
    permissions:
      contents: read
      actions: read
      checks: write
      pull-requests: write
      statuses: write

    steps:
    - name: Run unit tests on target
      shell: bash
      run: |
        source /opt/esp-idf/export.sh
        esptool.py erase_flash
        python3 test_runner.py --port /dev/ttyUSB1 --firmware unity-app/build/esp32_meteopod_test_app.bin --timeout 300 --output results.xml
  
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unity-test-results
        path: |
          results.xml
          test_output.log
          
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: ESP32 Unity Tests
        path: results.xml
        reporter: java-junit
        
  flash:
    needs: test
    runs-on: [self-hosted, Linux, X64]

    steps:
    - name: Flash with ESP-IDF
      shell: bash
      run: |
        source /opt/esp-idf/export.sh
        /usr/local/bin/manage_usb_power cycle ttyUSB1
        idf.py -p /dev/ttyUSB1 flash || idf.py -p /dev/ttyUSB1 flash

  monitor_output:
    needs: flash
    runs-on: [self-hosted, Linux, X64]

    steps:
    - name: Monitor serial output after flashing
      shell: bash
      run: |
        source /opt/esp-idf/export.sh

        echo "Starting monitor using 'script' to simulate TTY..."

        timeout --preserve-status 30 script -q -c "idf.py -p /dev/ttyUSB1 monitor" monitor.log || [[ $? -eq 124 ]]
        
        echo "Monitoring complete. Checking for expected output..."

        ##########################################################################
        # Commenting out until test setup has sensors fitted #####################
        ##########################################################################
        # # Look for required strings using extended regex
        # if grep -Eq 'SYSTEM_MONITOR: Uptime|Free Heap' monitor.log; then
        #   echo "Expected log entries found"
        # else
        #   echo "Expected output NOT found"
        #   cat monitor.log
        #   exit 1
        # fi

        # echo "Checking for crash patterns..."

        # # Look for crash/fatal error signatures
        # if grep -Eq 'Guru Meditation Error|panic|abort|stack smashing|WDT|Backtrace' monitor.log; then
        #   echo "Crash pattern detected in monitor output!"
        #   cat monitor.log
        #   exit 1
        # fi

        # echo "No crash patterns detected. Serial output looks good."

        if grep -q 'wifi: Got IP' monitor.log && grep -q 'MAIN: Firmware version' monitor.log; then
          echo "Expected log entries found"
        else
          echo "Expected output NOT found"
          cat monitor.log
          exit 1
        fi
    - name: Upload monitor log
      uses: actions/upload-artifact@v4
      with:
        name: serial-log
        path: monitor.log

  artifact_upload:
    needs: monitor_output
    runs-on: [self-hosted, Linux, X64]

    steps:
    - name: Set timestamp
      id: timestamp
      run: echo "ts=$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"

    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      with:
        name: esp32-meteopod-firmware-${{ steps.timestamp.outputs.ts }}
        path: |
          build/esp32_meteopod.bin
          build/esp32_meteopod.elf
          build/esp32_meteopod.map

    - name: Upload test application artifacts
      uses: actions/upload-artifact@v4
      with:
        name: esp32-meteopod-test-app-${{ steps.timestamp.outputs.ts }}
        path: |
          unity-app/build/esp32_meteopod_test_app.bin
          unity-app/build/esp32_meteopod_test_app.elf
          unity-app/build/esp32_meteopod_test_app.map