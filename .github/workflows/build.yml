name: Build, flash and test meteopod firmware

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: [self-hosted, Linux, X64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean and set up environment
      shell: bash
      run: |
        source /opt/esp-idf/export.sh
        idf.py fullclean
        cp /opt/sdkconfig.defaults .

    - name: Build with ESP-IDF
      shell: bash
      run: |
        source /opt/esp-idf/export.sh
        idf.py build

  hw-test:
    needs: build
    name: Run Unit Tests on ESP32
    runs-on: [self-hosted, linux, esp32-hw]   # your self-hosted runner tags
    steps:
      - uses: actions/checkout@v4

      - name: Install ESP-IDF & toolchain  
        uses: espressif/install-esp-idf-action@v1       # Installs IDF, tools & sets up env :contentReference[oaicite:0]{index=0}  
        with:
          version: "v5.4"                               # or whichever ESP-IDF you’re on

      - name: Install pytest-embedded dependencies  
        run: |
          python3 -m pip install --upgrade pytest pytest-embedded pytest-rerunfailures pytest-ignore-test-results

      - name: Build & flash Unity test app  
        run: idf.py -C tools/unit-test-app -T all flash  # builds + flashes all tests :contentReference[oaicite:1]{index=1}  
        env:
          IDF_PORT: /dev/ttyUSB1                         # or ${{ secrets.ESP_SERIAL_PORT }}

      - name: Run on-target tests via pytest  
        run: |
          pytest \
            --target esp32 \
            --serial-port /dev/ttyUSB1 \
            --baud 115200 \
            --exitfirst                              # stop on first failure  
        # pytest-embedded’s default markers will pick up your unity-app and run all cases :contentReference[oaicite:2]{index=2}
  flash:
    needs: hw-test
    runs-on: [self-hosted, Linux, X64]

    steps:
    - name: Flash with ESP-IDF
      shell: bash
      run: |
        source /opt/esp-idf/export.sh
        /usr/local/bin/manage_usb_power cycle ttyUSB1
        idf.py -p /dev/ttyUSB1 flash

  monitor_output:
    needs: flash
    runs-on: [self-hosted, Linux, X64]

    steps:
    - name: Monitor serial output after flashing
      shell: bash
      run: |
        source /opt/esp-idf/export.sh

        echo "Starting monitor using 'script' to simulate TTY..."

        timeout --preserve-status 30 script -q -c "idf.py -p /dev/ttyUSB1 monitor" monitor.log || [[ $? -eq 124 ]]
        
        echo "Monitoring complete. Checking for expected output..."

        # Look for required strings using extended regex
        if grep -Eq 'MAIN: Temp: |SYSTEM_MONITOR: Uptime|Free Heap' monitor.log; then
          echo "Expected log entries found"
        else
          echo "Expected output NOT found"
          cat monitor.log
          exit 1
        fi

        echo "Checking for crash patterns..."

        # Look for crash/fatal error signatures
        if grep -Eq 'Guru Meditation Error|panic|abort|stack smashing|WDT|Backtrace' monitor.log; then
          echo "Crash pattern detected in monitor output!"
          cat monitor.log
          exit 1
        fi

        echo "No crash patterns detected. Serial output looks good."

    - name: Upload monitor log
      uses: actions/upload-artifact@v4
      with:
        name: serial-log
        path: monitor.log

  artifact_upload:
    needs: monitor_output
    runs-on: [self-hosted, Linux, X64]

    steps:
    - name: Set timestamp
      id: timestamp
      run: echo "ts=$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"

    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      with:
        name: esp32-meteopod-firmware-${{ steps.timestamp.outputs.ts }}
        path: |
          build/esp32_meteopod.bin
          build/esp32_meteopod.elf
          build/esp32_meteopod.map
